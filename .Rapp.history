Age = sample(c(rpois(1000, 25), rpois(1000, 45), rpois(1000, 65)), 1000)
Age
plot(Age)
hist(Age)
Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1000, 65)), 1000)
hist(Age)
Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000)
hist(Age)
y=sample(x('Male', 'Female'), 1000, replace=T, prob=0.5)
y=sample(c('Male', 'Female'), 1000, replace=T, prob=0.5)
y=sample(c('Male', 'Female'), 1000, replace=T, prob=0.5, 0.5)
y=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))
y
sum(y[y=='Male'])
sum(y=='Male')
sum(y=='Female')
y=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))
sum(y=='Female')
y=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))
sum(y=='Female')
rnorm(1000)
rnorm(1000) * 137
rnorm(1000)
rnorm(1000) * 137
rnorm(10)+1
rnorm(10)
rnorm(10, 1)
rnorm(10, 10, 10)
rnorm(10, 10, 1)
mean(137, 185)
mean(c(137, 185))
rnorm(162, 10)
rnorm(10, 162, 10)
rnorm(10, 162, 170-162)
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )
sample(m,1)
sample(m,2)
length(m)
x=2
df<-data.frame(#
	Transaction = 1:1000#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000)#
	Sex = Sex#
	Height_cm = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
)
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height_cm = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
)
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height_cm = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
)
hist(df$Height)
hist(df[df$Sex='Male', 'Height_cm'])
hist(df[df$Sex=='Male', 'Height_cm'])
hist(df[df$Sex=='Female', 'Height_cm'])
ifelse(Sex=='Male', 0.5, 0)
ifelse(Sex=='Male', 0.5, 0)*10
ifelse(Sex=='Male', 5, 0) + Height / 2
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
Height = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))
ifelse(Sex=='Male', 5, 0) + Height / 2
ifelse(Sex=='Male', 5, 0) + (Height / 2)
hist(ifelse(Sex=='Male', 5, 0) + (Height / 2))
hist(ifelse(Sex=='Male', 2, 0) + (Height / 2))
hist(ifelse(Sex=='Male', 1.5, 0) + (Height / 2))
ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10)
hist(ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10))
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
Height = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
Weight = ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10)#
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height = Height#
	Weight = Weight#
)
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
Height = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
Weight = ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10)#
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height = Height,#
	Weight = Weight#
)
df
plot(df, Height ~ Weight)
plot(df$Height, df$Weight)
plot(df$Height, df$Age)
plot(df$Height, df$Sex)
boxplot(df, Height ~ Sex)
boxplot(df$Height ~ df$Sex)
x=sample(1:15)
x
x=c('T38', 'T256', 'T307', 'T117', 'T138', 'T263', 'T290', 'T308', 'T326', 'T387', 'T697, 'T284')
x=c('T38', 'T256', 'T307', 'T117', 'T138', 'T263', 'T290', 'T308', 'T326', 'T387', 'T697', 'T284', 'T190', 'T317', 'T876')
sample(x, 5, replace=T)
set.seed(011790)
x=c('T38', 'T256', 'T307', 'T117', 'T138', 'T263', 'T290', 'T308', 'T326', 'T387', 'T697', 'T284', 'T190', 'T317', 'T876')
sample(x, 5, replace=T)
df<-read.table("/Users/afaranda/Desktop/Untitled.txt")
df<-read.table("/Users/afaranda/Desktop/CISC683_HW2_Table.txt")
df<-read.table("/Users/afaranda/Desktop/CISC683_HW2_Table.txt", header=T)
df<-read.table("/Users/afaranda/Desktop/CISC683_HW2_Table.txt", header=T, quote="")
df
database<-list(#
	a=c('a', 'b', 'c', 'd'),#
	b=c('a', 'b'),#
	c=c('a', 'c', 'd'),#
	d=c('c', 'b','d'),#
	e=c('b', 'c'),#
	f=c('b', 'd'), #
	g=c('c', 'd'),#
	h=c('a', 'c', 'd', 'e'),#
	i=c('c', 'e'),#
	j=c('b', 'c', 'e'),#
	k=c('d', 'e'),#
	l=c('b', 'e'),#
	m=c('a', 'e'),#
	n=c('b', 'd')#
)
database
database[[n]]
database[['a']]
grep('a',database[['a']])
grep('f',database[['a']])
grepl('f',database[['a']])
grepl('a',database[['a']])
sum(database[['a']] == 'a')
v
sum(database[['a']] == 'v')
grep('a', database)
length(grep('a', database))
length(grep('b', database))
length(grep('c', database))
length(grep('d', database))
length(grep('e', database))
minSup=3#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for i in I{#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
}
L1<-findFrequentOneItem(database, I, minSup)
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for i in I{#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
}
minSup=3#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
}
L1<-findFrequentOneItem(database, I, minSup)
L1
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
minSup=3#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
names(L1)
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 => M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 >= M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
database<-list(#
	a=c('a', 'b', 'c', 'd'),#
	b=c('a', 'b'),#
	c=c('a', 'c', 'd'),#
	d=c('c', 'b','d'),#
	e=c('b', 'c'),#
	f=c('b', 'd'), #
	g=c('c', 'd'),#
	h=c('a', 'c', 'd', 'e'),#
	i=c('c', 'e'),#
	j=c('b', 'c', 'e'),#
	k=c('d', 'e'),#
	l=c('b', 'e'),#
	m=c('a', 'e'),#
	n=c('b', 'd')#
)#
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 >= M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
database<-list(#
	a=c('a', 'b', 'c', 'd'),#
	b=c('a', 'b'),#
	c=c('a', 'c', 'd'),#
	d=c('c', 'b','d'),#
	e=c('b', 'c'),#
	f=c('b', 'd'), #
	g=c('c', 'd'),#
	h=c('a', 'c', 'd', 'e'),#
	i=c('c', 'e'),#
	j=c('b', 'c', 'e'),#
	k=c('d', 'e'),#
	l=c('b', 'e'),#
	m=c('a', 'e'),#
	n=c('b', 'd')#
)#
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 >= M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, 4)
L1
names(L1)
names(L1)[order(unlist(L1))]
names(L1)[order(unlist(L1), decreasing=F)]
test<-data.frame(#
	sample=c(paste("S",1:15,sep=''))#
)
test
test<-data.frame(#
	sample=c(paste("S",1:15,sep=''))#
	genotype=c(rep('WT',9), rep('KO',6))#
)
test<-data.frame(#
	sample=c(paste("S",1:15,sep='')),#
	genotype=c(rep('WT',9), rep('KO',6))#
)
test
test<-data.frame(#
	sample=c(paste("S",1:15,sep='')),#
	genotype=c(rep('WT',9), rep('KO',6)),#
	time=c(rep(c(0,24,48), each=3), rep(c(0,48), each=3))#
)
test
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[samplCol]]))#
	}#
	levelList#
}
getGroupList(df=test)
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[sampCol]]))#
	}#
	levelList#
}
getGroupList(df=test)
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[f]]))#
	}#
	levelList#
}
getGroupList(df=test)
class(getGroupList(df=test)[[1]]_
class(getGroupList(df=test)[[1]])
expand.grid
expand.grid(test)
expand.grid(test[,c("genotype", "time")])
getwd()
wd<-getwd
wd<-getwd()
wd
paste(wd,'Diff', sep='/')
s<-9.699202
s
347/s
(347/s)/1.185
library(BiocInstaller)
biocLite('polyester')
q()
plotCluster<-function(mat, ktable, k, c=1, ft){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev, by=0)#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	df<-merge(df, Size, by=0 )#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	row.names(ft) <-ft$Sample_Number#
	df$Group <- ft[row.names(df),'Sample_Number' ]#
	df#
	#boxplot(mean ~ )#
}
silhouette
library(cluster)
silhouette
data(ruspini)
pr4<-pam(ruspini, 4)
pr4
plot(si)
si<-silhouette(pr4)
si
plot(si)
pr4<-pam(ruspini, 10)
si<-silhouette(pr4)
plot(si)
si<-silhouette(pr4)
?pam
library(edgeR)
edgeR
library(edgeR, verbose=T)
session.info()
sessionInfo
sessionInfo()
library(dplyr)
library(reshape2)
library(cluster)
library(sva)
session.info()
sessionInfo()
ComBat()
library(topGO)
ls()
setwd('/Users/afaranda/Documents/CISC683_Project')#
library(dplyr)#
library(cluster)#
library(reshape2)#
# wd<-getwd()#
source('BuildDataMatrix.R')#
source('PreprocessingFunctions.R')#
source('PrincipalComponents.R')#
source('ClusteringFunctions.R')#
######################### Apply Preprocessing Steps #############################
#
# Add Class attribute to feature definition table#
ft<-raw[[1]]#
ft$Class<-as.factor(paste("Hour",ft$Hours_PCS,sep=""))#
ft$Class<-factor(#
	ft$Class, #
	levels=unique(#
		as.character(ft$Class[order(ft$Hours_PCS)])#
	)#
)#
counts<-(raw[[2]][6:nrow(raw[[2]]),])      # Extract Raw Counts#
ecpm<-edgeRcpm(counts)                     # Normalize using edgeR's TMM method#
ecmb<-wrapCombat_intOnly(ecpm, ft)         # Correct for batch effects#
ecmb<-fixCombatNegatives(ecmb)             # replace negative values with min +ve#
ecpm.log<-log(ecmb[,2:19])				   # Apply log transformation Combat#
#
############## Apply Variance Filters; Plot Principal Components ################
varRanks <-c(10, 50, 100, 200)                # Try different variance filters#
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	# Plot results for TMM Normalized Data#
	f1<-paste('ECPM_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
#
	# Plot results for batch adjusted TMM data#
	f1<-paste('ECMB_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECMB_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
}#
#
############ Analyze Sample Clusters at desired Variance Threshold ##############
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
trees <-c(1,2,3,4,5,6)                        # Different levels k#
v =200#
ecpm.filter<-varianceFilter(ecpm, threshold=v)#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
#
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=v, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=v, label='ecmb'#
	)#
)#
#
write.csv(clustStats, 'Sample_Cluster_Statistics.csv')
setwd('/Users/afaranda/Documents/CISC683_Project')
setwd('/Users/afaranda/Documents/CISC683_Project_Report')
library(dplyr)#
library(cluster)#
library(reshape2)#
# wd<-getwd()#
source('BuildDataMatrix.R')#
source('PreprocessingFunctions.R')#
source('PrincipalComponents.R')#
source('ClusteringFunctions.R')#
######################### Apply Preprocessing Steps #############################
#
# Add Class attribute to feature definition table#
ft<-raw[[1]]#
ft$Class<-as.factor(paste("Hour",ft$Hours_PCS,sep=""))#
ft$Class<-factor(#
	ft$Class, #
	levels=unique(#
		as.character(ft$Class[order(ft$Hours_PCS)])#
	)#
)#
counts<-(raw[[2]][6:nrow(raw[[2]]),])      # Extract Raw Counts#
ecpm<-edgeRcpm(counts)                     # Normalize using edgeR's TMM method#
ecmb<-wrapCombat_intOnly(ecpm, ft)         # Correct for batch effects#
ecmb<-fixCombatNegatives(ecmb)             # replace negative values with min +ve#
ecpm.log<-log(ecmb[,2:19])				   # Apply log transformation Combat#
#
############## Apply Variance Filters; Plot Principal Components ################
varRanks <-c(10, 50, 100, 200)                # Try different variance filters#
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	# Plot results for TMM Normalized Data#
	f1<-paste('ECPM_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
#
	# Plot results for batch adjusted TMM data#
	f1<-paste('ECMB_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECMB_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
}#
#
############ Analyze Sample Clusters at desired Variance Threshold ##############
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
trees <-c(1,2,3,4,5,6)                        # Different levels k#
v =200#
ecpm.filter<-varianceFilter(ecpm, threshold=v)#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
#
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=v, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=v, label='ecmb'#
	)#
)#
#
write.csv(clustStats, 'Sample_Cluster_Statistics.csv')#
#
################# Analyze Gene Clusters at Variance Threshold #####################
v = 2000#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='manhattan', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
s<-as.data.frame(#
	silhouette(cutree(h, 20), dist(log(mat), method='manhattan'))[,1:3]#
)#
s.means<-s %>% #
	group_by(cluster) %>%#
	summarize(Mean_Silhouette=mean(sil_width))#
#
cstat<-inner_join(#
	ct %>% #
		group_by(Cluster) %>%#
		summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)),		#
	s %>%#
		group_by(cluster) %>%#
		dplyr::rename(Cluster = cluster) %>%#
		summarize(Mean_Silhouette=mean(sil_width)),#
		by='Cluster'#
)#
write.csv(cstat, 'Gene_Cluster_Stats.csv')#
cl<- cstat %>%#
	filter(Count > 25, STDev_logCPM < 30)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
#
png('Gene_Cluster_Profiles.png', width=960, height=280)#
	print(bp)#
dev.off()#
bp
head(mat)
x<-1:3*1:3
x
1:3
rep(1:3, 3)
rep(1:3, 3)*1:3
rep(1:3, 3)* rep(1:3, each=3)
x<-rep(1:3, 3)* rep(1:3, each=3)
x<-as.matrix(x, c(3,3))
x
x<-as.matrix(x, nrow=3,ncol3)
x
x<-as.matrix(x, nrow=3)
x
dim(x)<-c(3,3)
x
apply(x, 1, sd)
y<-apply(x, 1, sd)
y
x*y
x/y
x*y
x/y
as.data.frame(x)/y
a<-apply(mat, 1, mean)
s<-apply(mat, 1, sd)
mat.c<-mat - a
head(mat.c)
length(a)
mat.cs<-mat / s
head(mat.cs)
mat.cs<-mat.c / s
head(mat.cs)
h<-wrapHclust(log(mat.cs), idCol=0, transpose=F, d.meth='manhattan', h.method='complete')
s<-apply(mat, 1, sd)
mat.c<-mat / s
h<-wrapHclust(log(mat.s), idCol=0, transpose=F, d.meth='manhattan', h.method='complete')
mat.s<-mat / s
h<-wrapHclust(log(mat.s), idCol=0, transpose=F, d.meth='manhattan', h.method='complete')
ktable<-tabulate_H_Clusters(h, ks=1:20)
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)
head(ct)
s<-as.data.frame(#
	silhouette(cutree(h, 20), dist(log(mat), method='manhattan'))[,1:3]#
)
s
s<-as.data.frame(#
	silhouette(cutree(h, 20), dist(log(mat.s), method='manhattan'))[,1:3]#
)
s
l<- cstat %>%#
	filter(Count > 25, STDev_logCPM < 30)
cl<- cstat %>%#
	filter(Count > 25, STDev_logCPM < 30)
cl
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)
bp
head(ct)
cl
cl<-cl$Cluster
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)
bp
v = 200#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
a<-apply(mat, 1, mean)#
s<-apply(mat, 1, sd)#
mat.c<-mat - a#
mat.s<-mat / s#
#
x<-rep(1:3, 3)* rep(1:3, each=3)#
x<-as.matrix(x, nrow=3)#
#
h<-wrapHclust(log(mat.s), idCol=0, transpose=F, d.meth='manhattan', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
s<-as.data.frame(#
	silhouette(cutree(h, 20), dist(log(mat.s), method='manhattan'))[,1:3]#
)#
s.means<-s %>% #
	group_by(cluster) %>%#
	summarize(Mean_Silhouette=mean(sil_width))#
#
cstat<-inner_join(#
	ct %>% #
		group_by(Cluster) %>%#
		summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)),		#
	s %>%#
		group_by(cluster) %>%#
		dplyr::rename(Cluster = cluster) %>%#
		summarize(Mean_Silhouette=mean(sil_width)),#
		by='Cluster'#
)#
write.csv(cstat, 'Gene_Cluster_Stats.csv')#
cl<- cstat %>%#
	filter(Count > 5, STDev_logCPM < 30)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
#
png('Gene_Cluster_Profiles.png', width=960, height=280)#
	print(bp)#
dev.off()#
bp
cstat
print( row.names=F, #
	cstat %>% filter( Cluster == 3) %>% #
	group_by(ID) %>%#
	dplyr::select(ID)#
)
head(cstat)
head(ct)
print( row.names=F, #
	ct %>% filter( Cluster == 3) %>% #
	group_by(ID) %>%#
	dplyr::select(ID)#
)
print( row.names=F,#
	as.data.frame(#
		ct %>% filter( Cluster == 3) %>% #
		group_by(ID) %>%#
		dplyr::select(ID)#
	)#
)
print( row.names=F,#
	as.data.frame(#
		ct %>% filter( Cluster == 3) %>% #
		group_by(ID) %>%#
		dplyr::select(ID) %>%#
		summarize(ID)#
	)#
)
print( row.names=F,#
	as.data.frame(#
		ct %>% filter( Cluster == 3) %>% #
		group_by(ID) %>%#
		dplyr::select(ID) %>%#
		summarize(n())#
	)#
)
print( row.names=F,#
	as.data.frame(#
		ct %>% filter( Cluster == 3) %>% #
		group_by(ID) %>%#
		summarize(n()) %>%#
		dplyr::select(ID)#
	)#
)
