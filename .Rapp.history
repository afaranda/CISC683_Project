wrapHclust<-function(df, idCol=1,#
	transpose=T, d.meth="euclidean", d.p = 2,#
	h.method = "average"#
 ){#
 	if(!is.null(idCol) & idCol !=0){#
		idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
		row.names(df)<-df[,idCol]#
		df<-df[,setdiff(1:ncol(df), idCol)]#
	}#
	if(transpose){df<-t(df)}#
	d<-dist(df, method=d.meth, p=d.p)#
	h<-hclust(d, method=h.method)#
}
}
}
wrapHclust<-function(df, idCol=1,#
	transpose=T, d.meth="euclidean", d.p = 2,#
	h.method = "average"#
 ){#
 	if(!is.null(idCol) & idCol !=0){#
		idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
		row.names(df)<-df[,idCol]#
		df<-df[,setdiff(1:ncol(df), idCol)]#
	}#
	if(transpose){df<-t(df)}#
	d<-dist(df, method=d.meth, p=d.p)#
	h<-hclust(d, method=h.method)#
}
plotHclust<-function(h, ft, sampleCol=7, labelCol=8, colorCol=4, main=''){#
	labColor <-ifelse(ft[h$order,colorCol] == 'DNA', "red", "black")#
	x<-1:nrow(ft)#
	lab <- ft[h$order, labelCol]#
	print(lab)#
	plot(#
		h, labels = F,#
		main = main,#
		xlab = '',#
		sub = '', #
		hang = -1#
	)#
	#print(labColor)#
	text(x=x, labels = lab, col=labColor, srt = 90, xpd=NA, adj=c(1.2,0.5))#
}
tabulate_H_Clusters<-function(h, ks=c(1:5) ){#
	hc_table <- data.frame(#
		Sample = h$labels#
	)#
	for (k in ks){#
		if(k <= nrow(hc_table)){#
			c=data.frame(c=cutree(h, k))#
			c$Sample = row.names(c)#
			hc_table<-merge(#
				hc_table, c,#
				by = 'Sample'#
			)#
			name<-paste("k_eq_", k, sep='')#
			names(hc_table)[grep('c', names(hc_table))]<-name#
		}#
	}#
	row.names(hc_table)<-hc_table$Sample#
	hc_table<-hc_table[,setdiff(1:ncol(hc_table), grep('Sample', names(hc_table)))]#
	hc_table#
}
tabulate_k_means<-function(df, idCol=1, ks=c(1:5), transpose=T, method='Hartigan-Wong'){#
	if(!is.null(idCol) & idCol != 0){#
		idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
		row.names(df)<-df[,idCol]#
		df<-df[,setdiff(1:ncol(df), idCol)]#
	}#
	if(transpose){df<-t(df)}#
	hc_table <- data.frame(#
		Sample = row.names(df)#
	)#
	for (k in ks){#
		if(k <= nrow(hc_table)){#
			c=data.frame(c=kmeans(df, nstart=nrow(hc_table), centers=k, algorithm=method )[[1]])#
			c$Sample = row.names(c)#
			hc_table<-merge(#
				hc_table, c,#
				by = 'Sample'#
			)#
			name<-paste("k_eq_", k, sep='')#
			names(hc_table)[grep('c', names(hc_table))]<-name#
		}#
	}#
	row.names(hc_table)<-hc_table$Sample#
	hc_table<-hc_table[,setdiff(1:ncol(hc_table), grep('Sample', names(hc_table)))]#
	hc_table#
}
source('ClusteringFunctions.R')
apfunc<-function(x, applyFun){#
	if(applyFun == 'mean'){#
		return(mean(x, na.rm=T))#
	} else if(applyFun == 'sd')){#
		return(sd(x, na.rm=T))#
	} else if(applyFun == 'max')){#
		return(max(x, na.rm=T))#
	} else if(applyFun == 'min')){#
		return(min(x, na.rm=T))#
	} else if(applyFun == 'length')){#
		return(length(x))#
	}#
}
apfunc<-function(x, applyFun='mean'){#
	if(applyFun == 'mean'){#
		return(mean(x, na.rm=T))#
	}#
}
apfunc<-function(x, applyFun='mean'){#
	if(applyFun == 'mean'){#
		return(mean(x, na.rm=T))#
	} #
}
apfunc<-function(x, applyFun='mean'){#
	if(applyFun == 'mean'){#
		return(mean(x, na.rm=T))#
	} #
	else if(applyFun == 'sd')){#
		return(sd(x, na.rm=T))#
	}#
	}
apfunc<-function(x, applyFun='mean'){#
	if(applyFun == 'mean'){#
		return(mean(x, na.rm=T))#
	} else if(applyFun == 'sd')){#
		return(sd(x, na.rm=T))#
	}#
	}
apfunc<-function(x, applyFun='mean'){#
	if(applyFun == 'mean'){#
		return(mean(x, na.rm=T))#
	} else if(applyFun == 'sd'){#
		return(sd(x, na.rm=T))#
	} else if(applyFun == 'max'){#
		return(max(x, na.rm=T))#
	} else if(applyFun == 'min'){#
		return(min(x, na.rm=T))#
	} else if(applyFun == 'length'){#
		return(length(x))#
	}#
}
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2,apFunc, applyFun=applyFun)#
		m<-c(m, count=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-m}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
head(ecpm.filter)
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(#
				raw[[2]][6:nrow(raw[[2]]),], ft, #
				group.dn=g1, group.up=g2#
			)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(#
				raw[[2]][6:nrow(raw[[2]]),], ft, #
				group.dn=g1, group.up=g2#
			)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
edgeRPairwise<-function(#
	df, ft, idCol=1, sampCol=7, group.dn=c(1,2,3), #
	group.up=c(4,5,6), groupCol=8#
){#
	idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
	if(is.character(group.dn)){#
		group.dn<-as.numeric(row.names((ft[ft[,sampCol]%in% group.dn,])))#
		group.up<-as.numeric(row.names((ft[ft[,sampCol]%in% group.up,])))#
	}#
	print(group.dn)#
	if(is.numeric(group.dn)){#
		print(group.dn)#
		gr.dn<-ft[group.dn, sampCol]#
		gr.up<-ft[group.up, sampCol]#
	}#
	row.names(df)<-df[,idCol]#
	counts<-df[, setdiff(1:ncol(df), idCol)]#
	samples<-c(gr.dn, gr.up)#
	counts<-counts[,samples]#
	y<-DGEList(#
		counts=counts, #
		group=droplevels(ft[c(group.dn, group.up), groupCol]), #
		genes=row.names(df)	#
	)#
	# Filter DGEList: Remove genes where fewer than two samples have a cpm > 1#
	keep <- rowSums(cpm(y) > 1) >= 2#
	y.filter <-y[keep, ]#
	y.filter$samples$lib.size <- colSums(y.filter$counts) # Fix library size after filtering#
	# Calculate Normalization factors and dispersion estimates#
	y.filter <-calcNormFactors(y.filter)#
	y.filter <-estimateCommonDisp(y.filter, verbose=T)#
	y.filter <-estimateTagwiseDisp(y.filter)#
	# Calculate Differential Expression#
	et<-exactTest(y.filter, pair=levels(y.filter$samples$group))#
	degSet<-topTags(et, n=25000)@.Data[[1]]#
	return(list(y.filter, degSet))#
}
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			print(g1)#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
ft
ft<-raw[[1]]#
ft$Class<-as.factor(paste("Hour",ft$Hours_PCS,sep=""))#
counts<-(raw[[2]][6:nrow(raw[[2]]),])#
png("RawCounts.png", width=240, height=150)#
	plotPrinComp(counts, raw[[1]], groupCol=4)#
dev.off()
plotPrinComp(counts, raw[[1]], groupCol=4)
ecpm<-edgeRcpm(counts)#
png("TMM_Normalized.png", width=240, height=150)#
	plotPrinComp(ecpm, raw[[1]], groupCol=4)#
dev.off()
plotPrinComp(ecpm, raw[[1]], groupCol=4)
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			print(g1)#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
dgl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
nrow(dgl)
head(dgl)
# deg_master[1,]<-c("DROP", NA, NA, NA, NA, NA, NA, NA)#
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ rm(deg_master); deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
nrow(deg_master)
dgl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
nrow(dgl)
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ rm('deg_master'); deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
dgl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
nrow(dgl)
rm(dgl)
nrow(dgl)
rm(deg_master)
deg_master
edgeRPairwise<-function(#
	df, ft, idCol=1, sampCol=7, group.dn=c(1,2,3), #
	group.up=c(4,5,6), groupCol=8#
){#
	idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
	if(is.character(group.dn)){#
		group.dn<-as.numeric(row.names((ft[ft[,sampCol]%in% group.dn,])))#
		group.up<-as.numeric(row.names((ft[ft[,sampCol]%in% group.up,])))#
	}#
	if(is.numeric(group.dn)){#
		#print(group.dn)#
		gr.dn<-ft[group.dn, sampCol]#
		gr.up<-ft[group.up, sampCol]#
	}#
	row.names(df)<-df[,idCol]#
	counts<-df[, setdiff(1:ncol(df), idCol)]#
	samples<-c(gr.dn, gr.up)#
	counts<-counts[,samples]#
	y<-DGEList(#
		counts=counts, #
		group=droplevels(ft[c(group.dn, group.up), groupCol]), #
		genes=row.names(df)	#
	)#
	# Filter DGEList: Remove genes where fewer than two samples have a cpm > 1#
	keep <- rowSums(cpm(y) > 1) >= 2#
	y.filter <-y[keep, ]#
	y.filter$samples$lib.size <- colSums(y.filter$counts) # Fix library size after filtering#
	# Calculate Normalization factors and dispersion estimates#
	y.filter <-calcNormFactors(y.filter)#
	y.filter <-estimateCommonDisp(y.filter, verbose=T)#
	y.filter <-estimateTagwiseDisp(y.filter)#
	# Calculate Differential Expression#
	et<-exactTest(y.filter, pair=levels(y.filter$samples$group))#
	degSet<-topTags(et, n=25000)@.Data[[1]]#
	return(list(y.filter, degSet))#
}
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ rm('deg_master'); deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
){#
	idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
	if(is.character(group.dn)){#
		group.dn<-as.numeric(row.names((ft[ft[,sampCol]%in% group.dn,])))#
		group.up<-as.numeric(row.names((ft[ft[,sampCol]%in% group.up,])))#
	}#
	if(is.numeric(group.dn)){#
		print(group.dn)#
		gr.dn<-ft[group.dn, sampCol]#
		gr.up<-ft[group.up, sampCol]#
	}#
	row.names(df)<-df[,idCol]#
	counts<-df[, setdiff(1:ncol(df), idCol)]#
	samples<-c(gr.dn, gr.up)#
	counts<-counts[,samples]#
	y<-DGEList(#
		counts=counts, #
		group=droplevels(ft[c(group.dn, group.up), groupCol]), #
		genes=row.names(df)	#
	)#
	# Filter DGEList: Remove genes where fewer than two samples have a cpm > 1#
	keep <- rowSums(cpm(y) > 1) >= 2#
	y.filter <-y[keep, ]#
	y.filter$samples$lib.size <- colSums(y.filter$counts) # Fix library size after filtering#
	# Calculate Normalization factors and dispersion estimates#
	y.filter <-calcNormFactors(y.filter)#
	y.filter <-estimateCommonDisp(y.filter, verbose=T)#
	y.filter <-estimateTagwiseDisp(y.filter)#
	# Calculate Differential Expression#
	et<-exactTest(y.filter, pair=levels(y.filter$samples$group))#
	degSet<-topTags(et, n=25000)@.Data[[1]]#
	return(list(y.filter, degSet))#
}
edgeRPairwise<-function(#
	df, ft, idCol=1, sampCol=7, group.dn=c(1,2,3), #
	group.up=c(4,5,6), groupCol=8#
){#
	idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
	if(is.character(group.dn)){#
		group.dn<-as.numeric(row.names((ft[ft[,sampCol]%in% group.dn,])))#
		group.up<-as.numeric(row.names((ft[ft[,sampCol]%in% group.up,])))#
	}#
	if(is.numeric(group.dn)){#
		print(group.dn)#
		gr.dn<-ft[group.dn, sampCol]#
		gr.up<-ft[group.up, sampCol]#
	}#
	row.names(df)<-df[,idCol]#
	counts<-df[, setdiff(1:ncol(df), idCol)]#
	samples<-c(gr.dn, gr.up)#
	counts<-counts[,samples]#
	y<-DGEList(#
		counts=counts, #
		group=droplevels(ft[c(group.dn, group.up), groupCol]), #
		genes=row.names(df)	#
	)#
	# Filter DGEList: Remove genes where fewer than two samples have a cpm > 1#
	keep <- rowSums(cpm(y) > 1) >= 2#
	y.filter <-y[keep, ]#
	y.filter$samples$lib.size <- colSums(y.filter$counts) # Fix library size after filtering#
	# Calculate Normalization factors and dispersion estimates#
	y.filter <-calcNormFactors(y.filter)#
	y.filter <-estimateCommonDisp(y.filter, verbose=T)#
	y.filter <-estimateTagwiseDisp(y.filter)#
	# Calculate Differential Expression#
	et<-exactTest(y.filter, pair=levels(y.filter$samples$group))#
	degSet<-topTags(et, n=25000)@.Data[[1]]#
	return(list(y.filter, degSet))#
}
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ rm('deg_master'); deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
edgeRPairwise<-function(#
	df, ft, idCol=1, sampCol=7, group.dn=c(1,2,3), #
	group.up=c(4,5,6), groupCol=8#
){#
	idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)#
	if(is.character(group.dn)){#
		group.dn<-as.numeric(row.names((ft[ft[,sampCol]%in% group.dn,])))#
		group.up<-as.numeric(row.names((ft[ft[,sampCol]%in% group.up,])))#
	}#
	if(is.numeric(group.dn)){#
		print(group.dn)#
		gr.dn<-ft[group.dn, sampCol]#
		print(group.up)#
		gr.up<-ft[group.up, sampCol]#
	}#
	row.names(df)<-df[,idCol]#
	counts<-df[, setdiff(1:ncol(df), idCol)]#
	samples<-c(gr.dn, gr.up)#
	counts<-counts[,samples]#
	y<-DGEList(#
		counts=counts, #
		group=droplevels(ft[c(group.dn, group.up), groupCol]), #
		genes=row.names(df)	#
	)#
	# Filter DGEList: Remove genes where fewer than two samples have a cpm > 1#
	keep <- rowSums(cpm(y) > 1) >= 2#
	y.filter <-y[keep, ]#
	y.filter$samples$lib.size <- colSums(y.filter$counts) # Fix library size after filtering#
	# Calculate Normalization factors and dispersion estimates#
	y.filter <-calcNormFactors(y.filter)#
	y.filter <-estimateCommonDisp(y.filter, verbose=T)#
	y.filter <-estimateTagwiseDisp(y.filter)#
	# Calculate Differential Expression#
	et<-exactTest(y.filter, pair=levels(y.filter$samples$group))#
	degSet<-topTags(et, n=25000)@.Data[[1]]#
	return(list(y.filter, degSet))#
}
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ rm('deg_master'); deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
dgl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
nrow(dgl)
rm(deg_master)
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ rm('deg_master'); deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
dgl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 0.6) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
nrow(dgl)
ecpm.filter<-ecpm[ecpm$ID %in% dgl$genes, 1:10]#
row.names(ecpm.filter)<-ecpm.filter$ID#
ecpm.filter<-ecpm.filter[,2:10]#
mat<-as.matrix(ecpm.filter)
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:10), k=1)
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:10), k=1)
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), k=1)
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), k=1)
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2,mean, na.rm=T)#
		m<-c(m, count=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-m}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2, mean, na.rm=T)#
		print(m)#
		m<-c(m, count=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-m}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2, mean, na.rm=T)#
		print(m)#
		m<-c(m, count=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-m}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2, mean, na.rm=T)#
		print("foo"#
		m<-c(m, count=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-m}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2, mean, na.rm=T)#
		print("foo")#
		m<-c(m, count=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-m}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2, mean, na.rm=T)#
		print("foo")#
		# m<-c(m, count=nrow(y))#
		# nc<-grep('kname', names(x))#
		# x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		# if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		# else{clust_table<-m}#
	}#
	# clust_table<-as.data.frame(clust_table)#
	# row.names(clust_table)<-1:nrow(clust_table)#
	# clust_table#
}
getClusterMeans(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-apply(y, 2, mean, na.rm=T)#
		print(m)#
		m<-c(m, count=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-m}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
x<-c(one=10, two=20, 3=30)
x<-list(one=10, two=20, 3=30)
x<-list(`one`=10, `two`=20, `three`30)
x<-list(`one`=10, `two`=20, `three`=30)
x
as.data.frame(x)
as.data.frame(x)
x<-c(`one`=10, `two`=20, `three`=30)
x
as.data.frame(x)
x
list(x)
as.list(x)
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-as.list(apply(y, 2, mean, na.rm=T))#
		m[['count']]=nrow(y))#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat<-function(mat, ktable, k, applyFun='mean'){#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-as.list(apply(y, 2, mean, na.rm=T))#
		m[['count']]=nrow(y)#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
as.list(x)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=2)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=3)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=4)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=5)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=6)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:6), k=6)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:10), k=10)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:10), k=10)
tabulate_k_means(mat, idCol=0, transpose=F, ks=1:10)
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:10)
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:2)
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:3)
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5)
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:6)
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:7)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), k=3)
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5)
mat
head(mat)
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		print(head(y))#
		print('')#
		m<-as.list(apply(y, 2, mean, na.rm=T))#
		m[['count']]=nrow(y)#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), k=3)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5, transpose=T), k=3)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=T, ks=1:5), transpose=T, k=3)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:5), k=1)
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=1)
plotCluster<-function(mat, ktable, k, c){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = clustMeans[clustMeans[,paste('ke_eq_',k, sep='')] == c, ]#
		SD = clustSDs[clustMeans[,paste('ke_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster<-function(mat, ktable, k, c){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = clustMeans[clustMeans[,paste('ke_eq_',k, sep='')] == c, ]#
		SD = clustSDs[clustMeans[,paste('ke_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster<-function(mat, ktable, k, c){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = clustMeans[clustMeans[,paste('ke_eq_',k, sep='')] == c, ],#
		SD = clustSDs[clustMeans[,paste('ke_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=1)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = clustMeans[clustMeans[,paste('ke_eq_',k, sep='')] == c, ],#
		SD = clustSDs[clustMeans[,paste('ke_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		m<-as.list(apply(y, 2, mean, na.rm=T))#
		m[['count']]=nrow(y)#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=1)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = clustMeans[clustMeans[,paste('ke_eq_',k, sep='')] == c, ],#
		SD = clustSDs[clustMeans[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=1)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ],#
		SD = clustSDs[clustMeans[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=1)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=5)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=6)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=5)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=5)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ])#
		#SD = clustSDs[clustMeans[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=3)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=4)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=5)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=6)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ])#
		SD = clustSDs[clustMeans[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ]),#
		SD = clustSDs[clustMeans[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ]),#
		#SD = clustSDs[clustMeans[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ])#
		#SD = clustSDs[clustMeans[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ])#
		SD = clustSDs[clustSDs[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ]),#
		SD = clustSDs[clustSDs[,paste('k_eq_',k, sep='')] == c, ]#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ]),#
		SD = as.numeric(clustSDs[clustSDs[,paste('k_eq_',k, sep='')] == c, ])#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		nc<-grep('kname', names(x))#
		x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	df<-data.frame(#
		Sample = names(clustMeans),#
		Cluster = c, #
		Mean = as.numeric(clustMeans[clustMeans[,paste('k_eq_',k, sep='')] == c, ]),#
		SD = as.numeric(clustSDs[clustSDs[,paste('k_eq_',k, sep='')] == c, ])#
	)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
getClusterStat(mat, ktable, k, applyFun='mean')
getClusterStat(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15), k=1)
getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15),applyFun='sd' k=1)
getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F, ks=5:15),applyFun='sd',k=1)
getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15),applyFun='mean',k=1)
tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15)
table(tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15)[,'k_eq_5'])
table(tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15)[,'k_eq_5'])
table(tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15)[,'k_eq_5'])
table(tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15)[,'k_eq_5'])
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15),applyFun='mean',k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,],#
		row.names(y)<-i#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,],#
		row.names(y)<-i,#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,],#
		row.names(y)<-i,#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,],#
		row.names(y)<-i,#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		row.names(y)<-i#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15),applyFun='mean',k=1)
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]=nrow(y)#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15),applyFun='mean',k=1)
head(x)
t(x)
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	cbind(#
		t(clustMeans)[c], #
		t(clustSDs)[c]#
}
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	cbind(#
		t(clustMeans)[c], #
		t(clustSDs)[c]#
	)#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,]#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]<-nrow(y)#
		m[['cluster']]<-i#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15),applyFun='mean',k=1)
x
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	print(head(x))#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,setdiff(names(x), kname)]#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]<-nrow(y)#
		m[['cluster']]<-i#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15),applyFun='mean',k=1)
x
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,setdiff(names(x), kname)]#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]<-nrow(y)#
		m[['cluster']]<-i#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-1:nrow(clust_table)#
	clust_table#
}
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=5:15),applyFun='mean',k=1)
x
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=1:15),applyFun='mean',k=1)
x
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=1:15),applyFun='mean',k=5)
x
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=1:15),applyFun='sd',k=5)
x
getClusterStat<-function(mat, ktable, k, applyFun='mean', transpose=F){#
	if(transpose){mat<-t(mat)}#
	mat<-as.data.frame(mat)#
	ktable<-as.data.frame(ktable[k])#
	mat$ID<-row.names(mat)#
	kname<-as.character(names(ktable))#
	ktable$ID<-row.names(ktable)#
	x<-merge(mat, ktable, by='ID')#
	row.names(x)<-x$ID#
	x<-x[2:ncol(x)]#
	for (i in unique(x[,kname])){#
		y<-x[x[,kname] == i,setdiff(names(x), kname)]#
		m<-as.list(apply(y, 2, apfunc, applyFun=applyFun))#
		m[['count']]<-nrow(y)#
		m[['cluster']]<-i#
		#nc<-grep('kname', names(x))#
		#x<-x[, c(nc, setdiff(1:ncol(x), nc))]#
		if(exists('clust_table')){clust_table<-rbind(clust_table, m)}#
		else{clust_table<-as.data.frame(m)}#
	}#
	clust_table<-as.data.frame(clust_table)#
	row.names(clust_table)<-clust_table$cluster#
	clust_table#
}
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=1:15),applyFun='sd',k=5)
x
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=1:15),applyFun='sd',k=6)
x
x<-getClusterStat(mat, ktable = tabulate_k_means(mat, idCol=0, transpose=F,ks=1:15),applyFun='sd',k=7)
x
plotCluster<-function(mat, ktable, k, c=1){#
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from tables#
	cbind(#
		t(clustMeans)[c], #
		t(clustSDs)[c],#
		t(clustSize)[c] #
	)#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose and merge for plotting#
	t(clustMeans)#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose and merge for plotting#
	t(clustMeans[c])#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose and merge for plotting#
	t(clustMeans)[c]#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose and merge for plotting#
	t(clustMeans)[,c]#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose and merge for plotting#
	as.data.frame(t(clustMeans))[,c]#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose and merge for plotting#
	as.data.frame(t(clustMeans))[c]#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev)#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev, by=0)#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev, by=0)#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names'))]#
	df<-merge(df, Size, by=0 )#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names'))]#
}
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev, by=0)#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	df<-merge(df, Size, by=0 )#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster<-function(mat, ktable, k, c=1){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev, by=0)#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	df<-merge(df, Size, by=0 )#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	df#
}
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=5)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=8)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=1)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=3)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c-1)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c=1)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c=2)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c=3)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c=4)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c=5)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c=6)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=6, c=7)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=7)
plotCluster(mat, tabulate_k_means(mat, idCol=0, transpose=F, ks=1:15), k=7, c=6)
