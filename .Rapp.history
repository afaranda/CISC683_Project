getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[samplCol]]))#
	}#
	levelList#
}
getGroupList(df=test)
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[sampCol]]))#
	}#
	levelList#
}
getGroupList(df=test)
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[f]]))#
	}#
	levelList#
}
getGroupList(df=test)
class(getGroupList(df=test)[[1]]_
class(getGroupList(df=test)[[1]])
expand.grid
expand.grid(test)
expand.grid(test[,c("genotype", "time")])
getwd()
wd<-getwd
wd<-getwd()
wd
paste(wd,'Diff', sep='/')
s<-9.699202
s
347/s
(347/s)/1.185
library(BiocInstaller)
biocLite('polyester')
q()
plotCluster<-function(mat, ktable, k, c=1, ft){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev, by=0)#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	df<-merge(df, Size, by=0 )#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	row.names(ft) <-ft$Sample_Number#
	df$Group <- ft[row.names(df),'Sample_Number' ]#
	df#
	#boxplot(mean ~ )#
}
silhouette
library(cluster)
silhouette
data(ruspini)
pr4<-pam(ruspini, 4)
pr4
plot(si)
si<-silhouette(pr4)
si
plot(si)
pr4<-pam(ruspini, 10)
si<-silhouette(pr4)
plot(si)
si<-silhouette(pr4)
?pam
setwd('/Users/afaranda/Documents/CISC683_Project')#
library(dplyr)#
# wd<-getwd()#
source('BuildDataMatrix.R')#
source('PreprocessingFunctions.R')#
source('PrincipalComponents.R')#
source('ClusteringFunctions.R')
ft<-raw[[1]]#
ft$Class<-as.factor(paste("Hour",ft$Hours_PCS,sep=""))#
ft$Class<-factor(#
	ft$Class, #
	levels=unique(#
		as.character(ft$Class[order(ft$Hours_PCS)])#
	)#
)
counts<-(raw[[2]][6:nrow(raw[[2]]),])#
ecpm<-edgeRcpm(counts)                     # Normalize using edgeR's TMM method#
ecmb<-wrapCombat_intOnly(ecpm, ft)         # Correct for batch effects#
ecmb<-fixCombatNegatives(ecmb)             # replace negative values with min +ve#
ecpm.log<-log(ecpm[,2:19])
library(biclust)
ecpm.filter<-ecpm[ecpm$ID %in% dna.gl$genes, c(1,11:19)]#
row.names(ecpm.filter)<-ecpm.filter$ID#
ecpm.filter<-ecpm.filter[,2:10]#
mat<-as.matrix(ecpm.filter)
dbi.contrasts <-list(c("Hour0", "Hour24"), c("Hour0", "Hour48"), c("Hour24", "Hour48"))#
dna.contrasts <-list(c("Hour0", "Hour6"), c("Hour0", "Hour24"), c("Hour6", "Hour24"))#
for( i in unique(ft$Seq_Lab)){#
	if(i == 'DNA'){#
		for(j in dna.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){ deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
	else{#
		for(j in dbi.contrasts){#
			g1<-ft[ft$Seq_Lab == i & ft$Class == j[1],'Sample_Number']#
			g2<-ft[ft$Seq_Lab == i & ft$Class == j[2],'Sample_Number']#
			deg<-edgeRPairwise(raw[[2]][6:nrow(raw[[2]]),], ft, group.dn=g1, group.up=g2)[[2]]#
			deg$Lab <- i#
			deg$DownGroup = j[1]#
			deg$UpGroup = j[2]#
			if(!exists('deg_master')){deg_master<-deg}#
			else{deg_master<-rbind(deg_master, deg)}#
		}#
	}#
}
ecpm.filter<-ecpm[ecpm$ID %in% dna.gl$genes, c(1,11:19)]#
row.names(ecpm.filter)<-ecpm.filter$ID#
ecpm.filter<-ecpm.filter[,2:10]#
mat<-as.matrix(ecpm.filter)
dbi.gl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 1) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 1) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
dbi.gl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 1) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 1) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
head(deg_master)
deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 1) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC')
dbi.gl<-inner_join(#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 1) %>%#
	filter(DownGroup == 'Hour0', UpGroup == 'Hour24', Lab=='DBI') %>%#
	dplyr::select(genes, logFC) %>%#
	rename( H0vsH24_logFC= 'logFC'),#
	deg_master %>% #
	filter(FDR < 0.05, abs(logFC) > 1) %>%#
	filter(DownGroup == 'Hour24', UpGroup == 'Hour48', Lab=='DBI') %>%#
	dplyr::select(genes, logFC) %>%#
	rename(H24vsH48_logFC = 'logFC'),#
	by='genes'#
)
ecpm.filter<-ecpm[ecpm$ID %in% dbi.gl$genes, 1:10]#
row.names(ecpm.filter)<-ecpm.filter$ID#
ecpm.filter<-ecpm.filter[,2:10]#
mat<-as.matrix(ecpm.filter)
head(mat)
min(mat)
max(mat)
biclust(log2(mat), method=BCCC())
x<_biclust(log2(mat), method=BCCC())
x<-biclust(log(mat), method=BCCC())
plot(x)
biplot(x)
plot(x)
plotParallelCoordinates(x)
parallelCoordinates(x)
parallelCoordinates(mat, x)
parallelCoordinates(mat, x, 1)
parallelCoordinates(mat, x, 2)
x
x<-biclust(log(t(mat)), method=BCCC())
x
x<-biclust(log(t(mat)), method=BCPlaid())
x
x<-biclust(log(mat), method=BCPlaid())
x
x<-biclust(log(mat), method=BCPlaid())
x
parallelCoordinates(mat, x)
parallelCoordinates(mat, x, 1)
parallelCoordinates(mat, x, 2)
parallelCoordinates(mat, x, 3)
parallelCoordinates(mat, x, 3)
x<-biclust(log(t(mat)), method=BCPlaid())
x<-biclust(log(t(mat)), method=BCCC())
x
x<-biclust(log(t(mat),2), method=BCCC())
x
x<-biclust(log((mat),2), method=BCCC())
x
parallelCoordinates(mat, x, 3)
parallelCoordinates(mat, x, 3)
parallelCoordinates(mat, x, 4)
x<-biclust(t(mat), method=BCCC())
x
parallelCoordinates(t(mat), x, 1)
parallelCoordinates(t(mat), x, 2)
x<-biclust(t(mat), method=BCCC(), delta=3)
parallelCoordinates(t(mat), x, 2)
x
parallelCoordinates(t(mat), x, 2)
x<-biclust(t(mat), method=BCCC(), delta=4)
x
x<-biclust(t(mat), method=BCCC(), delta=1.2)
x
x<-biclust(t(mat), method=BCCC(), delta=1.2, alpha=2)
x
agnes()
library(cluster)
agnes
agnes()
agnes(x)
agnes(mat)
a<-agnes(mat)
a
plot(a)
a<-agnes(t(mat))
plot(a)
a<-agnes(t(log(mat)))
plot(a)
hclust(log(t(mat)))
hclust(dist(log(t(mat))))
h<-hclust(dist(log(t(mat))))
plot(h)
nrow(mat)
silhouette
silhouette(h)
silhouette(mat, h)
?silhouette
silhouette(h, dist(mat))
silhouette(dist(mat))
silhouette(cutree(h, 3), dist(mat))
h
labels(h)
h$call
silhouette(cutree(h, 3), dist(log(t(mat))
)
)
silhouette(cutree(h, 3), dist(log(t(mat))))
x<-silhouette(cutree(h, 3), dist(log(t(mat))))
x
plot(x)
x<-silhouette(cutree(h, 5), dist(log(t(mat))))
plot(x)
x<-silhouette(cutree(h, 6), dist(log(t(mat))))
plot(x)
plot(h)
x<-silhouette(cutree(h, 2), dist(log(t(mat))))
plot(x)
x<-silhouette(cutree(h, 3), dist(log(t(mat))))
x
plot(x)
x
mean(x)
mean(x[1])
mean(x[2])
mean(x[3])
x[3]
x[,3]
mean(x[,3])
h<-hclust(dist(log((mat))))
x<-silhouette(cutree(h, 3), dist(log((mat))))
x
y<-c()
y
for( in 1:20){
for(i in 1:20){
y<-c(y, mean(silhouette(cutree(h, i), dist(log((mat))))[,3]))
}
i
silhouette(cutree(h, i), dist(log((mat))))[,3]
silhouette(cutree(h, i), dist(log((mat))))[3]
silhouette(cutree(h, i), dist(log((mat))))
silhouette(cutree(h, i), dist(log((mat)))
)
h
i
silhouette(cutree(h, 1), dist(log((mat)))
)
silhouette(cutree(h, 2), dist(log((mat))))
for(i in 2:20){
y<-c(y, mean(silhouette(cutree(h, i), dist(log((mat))))[,3]))
}
y
plot(y)
for(i in 2:30){
y<-c(y, mean(silhouette(cutree(h, i), dist(log((mat))))[,3]))
}
y
y<-y[21:50]
plot(y)
y
y<-c(y, mean(silhouette(cutree(h, i), dist(log((mat))))[,3]))
library(venn)
install.packages(venn)
install.packages('venn')
library(venn)
venn()
oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="")
geneNames <- replicate(1000, oneName())
geneNames
GroupA <- sample(geneNames, 400, replace=FALSE)
GroupB <- sample(geneNames, 750, replace=FALSE)
GroupA
GroupB
GroupC <- sample(geneNames, 250, replace=FALSE)
GroupD <- sample(geneNames, 300, replace=FALSE)
input  <-list(GroupA,GroupB,GroupC,GroupD)
input
tmp <- venn(input)
GroupA.i <- which(geneNames %in% GroupA)
GroupB.i <- which(geneNames %in% GroupB)
GroupC.i <- which(geneNames %in% GroupC)
GroupD.i <- which(geneNames %in% GroupD)
input.i  <-list(A=GroupA.i,B=GroupB.i,C=GroupC.i,D=GroupD.i)
input.i
venn(input.i)
tmp <- venn(input)
venn(input.i, color=style)
venn(input.i, color='style')
venn(input.i, zcolor='style')
input.i  <-list(A=GroupA.i,B=GroupB.i,C=GroupC.i,D=GroupD.i, E=GroupA-1)
input.i  <-list(A=GroupA.i,B=GroupB.i,C=GroupC.i,D=GroupD.i, E=GroupA.i-1)
venn(input.i, zcolor='style')
input.i  <-list(A=GroupA.i,B=GroupB.i,C=GroupC.i,D=GroupD.i, E=GroupA.i-1, F = GroupB.i-1)
venn(input.i, zcolor='style')
ls()
plotPrinComp(ecpm.filter, ft, groupCol=8)
ecpm.filter<-varianceFilter(ecpm, threshold=500)
plotPrinComp(ecpm.filter, ft, groupCol=8)
plotPrinComp(ecpm.filter, ft, groupCol=4)
plotPrinComp(ecpm.filter, ft, groupCol=4)
h<-wrapHclust(log(ecmb.filter[,2:19]), idCol=0, transpose=T, d.meth='maximum', h.method = "average", d.p=0.2)
h<-wrapHclust(ecpm.filter, idCol=1, transpose=T, d.meth='manhattan', h.method = "complete", d.p=0.2)
plot_H_cluster()
plotHclust(h, ft)
plotHclust(h, ft)
h<-wrapHclust(log(ecpm.filter), idCol=1, transpose=T, d.meth='manhattan', h.method = "complete", d.p=0.2)
head(ecpm.filter)
varRanks <-c(10, 50, 100, 200)                # Try different variance filters#
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
for( v in varRanks){#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	f1<-paste('ECPM_Samples_Top_', i,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', i,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1)#
	dev.off()#
	png(f2, width=240, height=150)#
		plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1)#
	dev.off()#
}
getwd()
getwd()
plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1)
png(f1)
plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1)
dev.off()
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	f1<-paste('ECPM_Samples_Top_', i,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', i,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1)#
	dev.off()#
	png(f2, width=240, height=150)#
		plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1)#
	dev.off()#
}
png(f1, width=240, height=150)#
		plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1)#
	dev.off()
png(f2, width=240, height=150)#
		plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1)#
	dev.off()
varRanks <-c(10, 50, 100, 200)                # Try different variance filters#
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	f1<-paste('ECPM_Samples_Top_', i,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', i,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
}
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	f1<-paste('ECPM_Samples_Top_', i,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', i,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
}
varRanks <-c(10, 50, 100, 200)                # Try different variance filters#
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	f1<-paste('ECPM_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
}
varRanks <-c(10, 50, 100, 200)                # Try different variance filters#
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	# Plot results for TMM Normalized Data#
	f1<-paste('ECPM_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
#
	# Plot results for batch adjusted TMM data#
	f1<-paste('ECMB_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECMB_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
}
