y
x<-c(c("GeneID", "FC"), y)
x
z<-c("GeneID", "ensmebl_gene_id", "description")
R
x<-data.frame(a=c(1,2,3), b=c(4,5,6))
x
names(x)
names(x) - "b"
names(x) + "b"
setdiff(names(x), "b")
x<-data.frame(a=c(1,2,3), b=c(4,5,6), c=c(7,8,9), d=c(10,11,12))
x
x<-x[,setdiff(names(x, "b"))]
x<-x[,setdiff(names(x), "b"))]
x<-x[,setdiff(names(x), "b")]
x
print(paste("hello \n", "goodbye"))
rpois(25,10)
rpois(10, 25)
rnbinom
rnbinom(25,10)
rnbinom(25,10, 0.5)
sample(rpois(25,1000), 10)
sample(rpois(1000, 25), 10)
Age = sample(c(rpois(1000, 25), rpois(1000, 45), rpois(1000, 65)), 1000)
Age
plot(Age)
hist(Age)
Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1000, 65)), 1000)
hist(Age)
Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000)
hist(Age)
y=sample(x('Male', 'Female'), 1000, replace=T, prob=0.5)
y=sample(c('Male', 'Female'), 1000, replace=T, prob=0.5)
y=sample(c('Male', 'Female'), 1000, replace=T, prob=0.5, 0.5)
y=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))
y
sum(y[y=='Male'])
sum(y=='Male')
sum(y=='Female')
y=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))
sum(y=='Female')
y=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))
sum(y=='Female')
rnorm(1000)
rnorm(1000) * 137
rnorm(1000)
rnorm(1000) * 137
rnorm(10)+1
rnorm(10)
rnorm(10, 1)
rnorm(10, 10, 10)
rnorm(10, 10, 1)
mean(137, 185)
mean(c(137, 185))
rnorm(162, 10)
rnorm(10, 162, 10)
rnorm(10, 162, 170-162)
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )
sample(m,1)
sample(m,2)
length(m)
x=2
df<-data.frame(#
	Transaction = 1:1000#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000)#
	Sex = Sex#
	Height_cm = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
)
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height_cm = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
)
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height_cm = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
)
hist(df$Height)
hist(df[df$Sex='Male', 'Height_cm'])
hist(df[df$Sex=='Male', 'Height_cm'])
hist(df[df$Sex=='Female', 'Height_cm'])
ifelse(Sex=='Male', 0.5, 0)
ifelse(Sex=='Male', 0.5, 0)*10
ifelse(Sex=='Male', 5, 0) + Height / 2
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
Height = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))
ifelse(Sex=='Male', 5, 0) + Height / 2
ifelse(Sex=='Male', 5, 0) + (Height / 2)
hist(ifelse(Sex=='Male', 5, 0) + (Height / 2))
hist(ifelse(Sex=='Male', 2, 0) + (Height / 2))
hist(ifelse(Sex=='Male', 1.5, 0) + (Height / 2))
ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10)
hist(ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10))
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
Height = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
Weight = ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10)#
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height = Height#
	Weight = Weight#
)
set.seed=(011790)#
Sex=sample(c('Male', 'Female'), 1000, replace=T, prob=c(0.5, 0.5))#
f=rnorm(1000, 162, 170-162); m=rnorm(1000,178, 185-177 )#
Height = sapply(Sex, function(S) ifelse(S=='Male', sample(m,1), sample(f,1) ))#
Weight = ifelse(Sex=='Male', 1.5, 0) + (Height / 2) - (df$Age / 10)#
df<-data.frame(#
	Transaction = 1:1000,#
	Age = sample(c(rpois(100, 25), rpois(1500, 45), rpois(1200, 65)), 1000),#
	Sex = Sex,#
	Height = Height,#
	Weight = Weight#
)
df
plot(df, Height ~ Weight)
plot(df$Height, df$Weight)
plot(df$Height, df$Age)
plot(df$Height, df$Sex)
boxplot(df, Height ~ Sex)
boxplot(df$Height ~ df$Sex)
x=sample(1:15)
x
x=c('T38', 'T256', 'T307', 'T117', 'T138', 'T263', 'T290', 'T308', 'T326', 'T387', 'T697, 'T284')
x=c('T38', 'T256', 'T307', 'T117', 'T138', 'T263', 'T290', 'T308', 'T326', 'T387', 'T697', 'T284', 'T190', 'T317', 'T876')
sample(x, 5, replace=T)
set.seed(011790)
x=c('T38', 'T256', 'T307', 'T117', 'T138', 'T263', 'T290', 'T308', 'T326', 'T387', 'T697', 'T284', 'T190', 'T317', 'T876')
sample(x, 5, replace=T)
df<-read.table("/Users/afaranda/Desktop/Untitled.txt")
df<-read.table("/Users/afaranda/Desktop/CISC683_HW2_Table.txt")
df<-read.table("/Users/afaranda/Desktop/CISC683_HW2_Table.txt", header=T)
df<-read.table("/Users/afaranda/Desktop/CISC683_HW2_Table.txt", header=T, quote="")
df
database<-list(#
	a=c('a', 'b', 'c', 'd'),#
	b=c('a', 'b'),#
	c=c('a', 'c', 'd'),#
	d=c('c', 'b','d'),#
	e=c('b', 'c'),#
	f=c('b', 'd'), #
	g=c('c', 'd'),#
	h=c('a', 'c', 'd', 'e'),#
	i=c('c', 'e'),#
	j=c('b', 'c', 'e'),#
	k=c('d', 'e'),#
	l=c('b', 'e'),#
	m=c('a', 'e'),#
	n=c('b', 'd')#
)
database
database[[n]]
database[['a']]
grep('a',database[['a']])
grep('f',database[['a']])
grepl('f',database[['a']])
grepl('a',database[['a']])
sum(database[['a']] == 'a')
v
sum(database[['a']] == 'v')
grep('a', database)
length(grep('a', database))
length(grep('b', database))
length(grep('c', database))
length(grep('d', database))
length(grep('e', database))
minSup=3#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for i in I{#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
}
L1<-findFrequentOneItem(database, I, minSup)
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for i in I{#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
}
minSup=3#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
}
L1<-findFrequentOneItem(database, I, minSup)
L1
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1<-append(L1, i)#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
minSup=3#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
names(L1)
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 > M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 => M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 >= M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
database<-list(#
	a=c('a', 'b', 'c', 'd'),#
	b=c('a', 'b'),#
	c=c('a', 'c', 'd'),#
	d=c('c', 'b','d'),#
	e=c('b', 'c'),#
	f=c('b', 'd'), #
	g=c('c', 'd'),#
	h=c('a', 'c', 'd', 'e'),#
	i=c('c', 'e'),#
	j=c('b', 'c', 'e'),#
	k=c('d', 'e'),#
	l=c('b', 'e'),#
	m=c('a', 'e'),#
	n=c('b', 'd')#
)#
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 >= M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, minSup)
L1
database<-list(#
	a=c('a', 'b', 'c', 'd'),#
	b=c('a', 'b'),#
	c=c('a', 'c', 'd'),#
	d=c('c', 'b','d'),#
	e=c('b', 'c'),#
	f=c('b', 'd'), #
	g=c('c', 'd'),#
	h=c('a', 'c', 'd', 'e'),#
	i=c('c', 'e'),#
	j=c('b', 'c', 'e'),#
	k=c('d', 'e'),#
	l=c('b', 'e'),#
	m=c('a', 'e'),#
	n=c('b', 'd')#
)#
minSup=6#
I=c('a', 'b', 'c', 'd', 'e')#
findFrequentOneItem<-function(D, I, M){#
	L1 <-list()#
	count<-0#
	for(i in I){#
		if(length(grep(i, database))	 >= M){#
			L1[[i]]<-length(grep(i, database))	#
		}		#
	}#
	return(L1)#
}#
L1<-findFrequentOneItem(database, I, 4)
L1
names(L1)
names(L1)[order(unlist(L1))]
names(L1)[order(unlist(L1), decreasing=F)]
test<-data.frame(#
	sample=c(paste("S",1:15,sep=''))#
)
test
test<-data.frame(#
	sample=c(paste("S",1:15,sep=''))#
	genotype=c(rep('WT',9), rep('KO',6))#
)
test<-data.frame(#
	sample=c(paste("S",1:15,sep='')),#
	genotype=c(rep('WT',9), rep('KO',6))#
)
test
test<-data.frame(#
	sample=c(paste("S",1:15,sep='')),#
	genotype=c(rep('WT',9), rep('KO',6)),#
	time=c(rep(c(0,24,48), each=3), rep(c(0,48), each=3))#
)
test
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[samplCol]]))#
	}#
	levelList#
}
getGroupList(df=test)
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[sampCol]]))#
	}#
	levelList#
}
getGroupList(df=test)
getGroupList<-function(df, sampCol='sample', fcCols=c('genotype', 'time')){#
	nfactors = length(fcCols)#
	levelList<-list()#
	for (f in fcCols){#
		levelList[[f]]<-levels(as.factor(df[[f]]))#
	}#
	levelList#
}
getGroupList(df=test)
class(getGroupList(df=test)[[1]]_
class(getGroupList(df=test)[[1]])
expand.grid
expand.grid(test)
expand.grid(test[,c("genotype", "time")])
getwd()
wd<-getwd
wd<-getwd()
wd
paste(wd,'Diff', sep='/')
s<-9.699202
s
347/s
(347/s)/1.185
library(BiocInstaller)
biocLite('polyester')
q()
plotCluster<-function(mat, ktable, k, c=1, ft){#
	# Get cluster statistics #
	clustMeans<-getClusterStat(mat, ktable, k, applyFun='mean')#
	clustSDs<-getClusterStat(mat, ktable, k, applyFun='sd')#
	clustSize<-getClusterStat(mat, ktable, k, applyFun='length')#
	# Drop Count, Cluster columns from statistics tables#
	clustMeans<-clustMeans[,setdiff(names(clustMeans), c('cluster', 'count'))]#
	clustSDs<-clustSDs[,setdiff(names(clustSDs), c('cluster', 'count'))]#
	clustSize<-clustSize[,setdiff(names(clustSize), c('cluster', 'count'))]#
#
	# Transpose #
	Mean<-as.data.frame(t(clustMeans))[c]#
	names(Mean)<-'Mean'#
	StDev<-as.data.frame(t(clustSDs))[c]#
	names(StDev)<-'StDev'#
	Size<-as.data.frame(t(clustSize))[c]#
	names(Size)<-'Size'#
	df<-merge(Mean, StDev, by=0)#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	df<-merge(df, Size, by=0 )#
	row.names(df)<-df$Row.names#
	df<-df[,setdiff(names(df), 'Row.names')]#
	row.names(ft) <-ft$Sample_Number#
	df$Group <- ft[row.names(df),'Sample_Number' ]#
	df#
	#boxplot(mean ~ )#
}
silhouette
library(cluster)
silhouette
data(ruspini)
pr4<-pam(ruspini, 4)
pr4
plot(si)
si<-silhouette(pr4)
si
plot(si)
pr4<-pam(ruspini, 10)
si<-silhouette(pr4)
plot(si)
si<-silhouette(pr4)
?pam
setwd('/Users/afaranda/Documents/CISC683_Project')#
library(dplyr)#
library(cluster)#
library(reshape2)#
# wd<-getwd()#
source('BuildDataMatrix.R')#
source('PreprocessingFunctions.R')#
source('PrincipalComponents.R')#
source('ClusteringFunctions.R')
ft<-raw[[1]]#
ft$Class<-as.factor(paste("Hour",ft$Hours_PCS,sep=""))#
ft$Class<-factor(#
	ft$Class, #
	levels=unique(#
		as.character(ft$Class[order(ft$Hours_PCS)])#
	)#
)#
counts<-(raw[[2]][6:nrow(raw[[2]]),])      # Extract Raw Counts#
ecpm<-edgeRcpm(counts)                     # Normalize using edgeR's TMM method#
ecmb<-wrapCombat_intOnly(ecpm, ft)         # Correct for batch effects#
ecmb<-fixCombatNegatives(ecmb)             # replace negative values with min +ve
varRanks <-c(10, 50, 100, 200)                # Try different variance filters#
for( v in varRanks){#
	print(v)#
	ecpm.filter <-varianceFilter(ecpm, threshold=v)#
	ecmb.filter <-varianceFilter(ecmb, threshold=v)#
	# Plot results for TMM Normalized Data#
	f1<-paste('ECPM_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECPM_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecpm.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
#
	# Plot results for batch adjusted TMM data#
	f1<-paste('ECMB_Samples_Top_', v,'_Ranked_Class.png')#
	f2<-paste('ECMB_Samples_Top_', v,'_Ranked_Lab.png')#
	png(f1, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=8, idCol=1))#
	dev.off()#
	png(f2, width=240, height=150)#
		print(plotPrinComp(ecmb.filter, ft, groupCol=4, idCol=1))#
	dev.off()#
}
summarizeSampleClusters<-function(data=ecpm, distm, linkm, v=50, label='ecpm'){#
ecpm.filter<-varianceFilter(data, threshold=v)#
	for(d in distm){#
		for(l in linkm){#
			f1<-paste(label,'_Samples_Top_', v,'_',d,'_',l,'_cluster.png')#
			mat<-log(ecpm.filter[,2:19])#
			h1<-wrapHclust(mat, #
				idCol=0, transpose=T, d.meth=d, h.method = l#
			)#
			kt1<-tabulate_H_Clusters(h1, ks = trees)#
			kt1$I<-row.names(kt1)#
			kt1$TC<-sapply(kt1$I, function(i) ft[ft$Sample_Number ==i, 'Class'])#
			kt1$TC<-sapply(kt1$I, function(i) ft[ft$Sample_Number ==i, 'Seq_Lab'])#
			png(f1, width=240, height=600)#
				plotHclust(h1, ft, sampleCol=7, labelCol=8, colorCol=4, main='')#
			dev.off()#
			for(t in trees){#
				r<-randIndex(kt1, length(trees)+1, t, length(trees)+2)#
				if(t > 1){#
					sil<-as.data.frame(#
						silhouette(#
							cutree(h1, t), #
							dist(t(mat), method= d)#
						)[,1:3]#
					)#
					sm<-mean(sil$sil_width)#
					sil<-sil %>% #
						group_by(cluster) %>%#
						summarize( mean(sil_width), n())#
					slist<-paste(sil$`n()`, '(',round(sil$`mean(sil_width)`,3),')',sep='')#
					print(slist)#
				}#
				else{ #
					sm<-0#
					slist<-"None"#
				}#
				if(!exists('randTable')){#
					randTable<-data.frame(#
						Data = label,#
						DistMethod = d,#
						LinkMethod = l,#
						NumClusters= t,#
						RandIndex = r,#
						MeanSilhouette=sm, #
						ClusterSilhouettes=paste(slist, collapse=', '),#
						stringsAsFactors=F#
					)#
				}#
				else{#
					randTable<-rbind(#
						randTable, #
						data.frame(#
							Data = 'ecpm',#
							DistMethod = d,#
							LinkMethod = l,#
							NumClusters= t,#
							RandIndex = r,#
							MeanSilhouette=sm, #
							ClusterSilhouettes=paste(slist, collapse=', '),#
							stringsAsFactors=F#
						)#
					)#
				}#
			}#
		}#
	}#
 	randTable#
}
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=50, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=50, label='ecmb'#
	)#
)
distm
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
trees <-c(1,2,3,4,5,6)                          # Different levels k#
v = 50#
ecpm.filter<-varianceFilter(ecpm, threshold=v)#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
#
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=50, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=50, label='ecmb'#
	)#
)#
#
write.csv(clustStats, 'Sample_Cluster_Statistics.csv')
distm
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
trees <-c(1,2,3,4,5,6)                          # Different levels k#
v = 50#
ecpm.filter<-varianceFilter(ecpm, threshold=v)#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
#
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=50, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=50, label='ecmb'#
	)#
)#
#
write.csv(clustStats, 'Sample_Cluster_Statistics.csv')
summarizeSampleClusters<-function(data=ecpm, distm, linkm, v=50, label='ecpm'){#
ecpm.filter<-varianceFilter(data, threshold=v)#
	for(d in distm){#
		for(l in linkm){#
			f1<-paste(label,'_Samples_Top_', v,'_',d,'_',l,'_cluster.png')#
			mat<-log(ecpm.filter[,2:19])#
			h1<-wrapHclust(mat, #
				idCol=0, transpose=T, d.meth=d, h.method = l#
			)#
			kt1<-tabulate_H_Clusters(h1, ks = trees)#
			kt1$I<-row.names(kt1)#
			kt1$TC<-sapply(kt1$I, function(i) ft[ft$Sample_Number ==i, 'Class'])#
			kt1$TC<-sapply(kt1$I, function(i) ft[ft$Sample_Number ==i, 'Seq_Lab'])#
			png(f1, width=240, height=300)#
				plotHclust(h1, ft, sampleCol=7, labelCol=8, colorCol=4, main='')#
			dev.off()#
			for(t in trees){#
				r<-randIndex(kt1, length(trees)+1, t, length(trees)+2)#
				if(t > 1){#
					sil<-as.data.frame(#
						silhouette(#
							cutree(h1, t), #
							dist(t(mat), method= d)#
						)[,1:3]#
					)#
					sm<-mean(sil$sil_width)#
					sil<-sil %>% #
						group_by(cluster) %>%#
						summarize( mean(sil_width), n())#
					slist<-paste(sil$`n()`, '(',round(sil$`mean(sil_width)`,3),')',sep='')#
					print(slist)#
				}#
				else{ #
					sm<-0#
					slist<-"None"#
				}#
				if(!exists('randTable')){#
					randTable<-data.frame(#
						Data = label,#
						DistMethod = d,#
						LinkMethod = l,#
						NumClusters= t,#
						RandIndex = r,#
						MeanSilhouette=sm, #
						ClusterSilhouettes=paste(slist, collapse=', '),#
						stringsAsFactors=F#
					)#
				}#
				else{#
					randTable<-rbind(#
						randTable, #
						data.frame(#
							Data = 'ecpm',#
							DistMethod = d,#
							LinkMethod = l,#
							NumClusters= t,#
							RandIndex = r,#
							MeanSilhouette=sm, #
							ClusterSilhouettes=paste(slist, collapse=', '),#
							stringsAsFactors=F#
						)#
					)#
				}#
			}#
		}#
	}#
 	randTable#
}
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=50, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=50, label='ecmb'#
	)#
)
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
trees <-c(1,2,3,4,5,6)                          # Different levels k#
v = 200#
ecpm.filter<-varianceFilter(ecpm, threshold=v)#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
#
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=50, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=50, label='ecmb'#
	)#
)
summarizeSampleClusters<-function(data=ecpm, distm, linkm, v=50, label='ecpm'){#
data<-varianceFilter(data, threshold=v)#
row.names(data)<-data$ID#
	for(d in distm){#
		for(l in linkm){#
			f1<-paste(label,'_Samples_Top_', v,'_',d,'_',l,'_cluster.png')#
			mat<-data[,2:19]#
			h1<-wrapHclust(mat, #
				idCol=0, transpose=T, d.meth=d, h.method = l#
			)#
			kt1<-tabulate_H_Clusters(h1, ks = trees)#
			kt1$I<-row.names(kt1)#
			kt1$TC<-sapply(kt1$I, function(i) ft[ft$Sample_Number ==i, 'Class'])#
			kt1$TC<-sapply(kt1$I, function(i) ft[ft$Sample_Number ==i, 'Seq_Lab'])#
			png(f1, width=240, height=300)#
				plotHclust(h1, ft, sampleCol=7, labelCol=8, colorCol=4, main='')#
			dev.off()#
			for(t in trees){#
				r<-randIndex(kt1, length(trees)+1, t, length(trees)+2)#
				if(t > 1){#
					sil<-as.data.frame(#
						silhouette(#
							cutree(h1, t), #
							dist(t(mat), method= d)#
						)[,1:3]#
					)#
					sm<-mean(sil$sil_width)#
					sil<-sil %>% #
						group_by(cluster) %>%#
						summarize( mean(sil_width), n())#
					slist<-paste(sil$`n()`, '(',round(sil$`mean(sil_width)`,3),')',sep='')#
					print(slist)#
				}#
				else{ #
					sm<-0#
					slist<-"None"#
				}#
				if(!exists('randTable')){#
					randTable<-data.frame(#
						Data = label,#
						DistMethod = d,#
						LinkMethod = l,#
						NumClusters= t,#
						RandIndex = r,#
						MeanSilhouette=sm, #
						ClusterSilhouettes=paste(slist, collapse=', '),#
						stringsAsFactors=F#
					)#
				}#
				else{#
					randTable<-rbind(#
						randTable, #
						data.frame(#
							Data = 'ecpm',#
							DistMethod = d,#
							LinkMethod = l,#
							NumClusters= t,#
							RandIndex = r,#
							MeanSilhouette=sm, #
							ClusterSilhouettes=paste(slist, collapse=', '),#
							stringsAsFactors=F#
						)#
					)#
				}#
			}#
		}#
	}#
 	randTable#
}
distm <-c('euclidean', 'manhattan')			  # Try different distance methods#
linkm <-c('complete', 'average', 'single')    # Try different linkage methods#
trees <-c(1,2,3,4,5,6)                          # Different levels k#
v = 200#
ecpm.filter<-varianceFilter(ecpm, threshold=v)#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
#
clustStats<-rbind(#
	summarizeSampleClusters(#
		data=ecpm, distm=distm, linkm=linkm, v=50, label='ecpm'#
	),#
	summarizeSampleClusters(#
		data=ecmb, distm=distm, linkm=linkm, v=50, label='ecmb'#
	)#
)
ct<-reshapeClusterTable(log(mat), ktable, ft, k=10)
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:10)
ct<-reshapeClusterTable(log(mat), ktable, ft, k=10)
head(ct)
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n(), Mean_logCPM=mean(value))
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/9, Mean_logCPM=mean(value))
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/12, Mean_logCPM=mean(value))
head(ct)
ct %>% filter(Cluster = 9)
ct %>% filter(Cluster == 9)
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value))
table<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value))
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), sd(value)) %>%#
	filter(Count > 5)
cl<-c(61,3,4,7,9,13,18)
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)
bp
cl<-c(1,3,4,7,9,13,18)
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)
bp
v = 500#
ecmb.filter<-varianceFilter(ecmb, threshold=v)
v = 500#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), sd(value)) %>%#
	filter(Count > 5)
bp<-ggplot(data=ct[ct$Cluster %in% 1:20,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)
bp
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5)#
cl<-c(1,3,5,8,9,13,18)
cl
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5)#
cl<-c(1,3,5,8,9,13,18)
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster
cl
bp
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='manhattan', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='manhattan', h.method='average')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='manhattan', h.method='single')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
################# Analyze Gene Clusters Based on Variance #######################
v = 500#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='single')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
v = 500#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='maximum')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
v = 500#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
v = 50#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
v = 200#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
v = 1000#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
v = 2000#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
v = 500#
ecmb.filter<-varianceFilter(ecmb, threshold=v)#
row.names(ecmb.filter)<-ecmb.filter$ID#
mat<-ecmb.filter[,2:ncol(ecpm.filter)]#
#
h<-wrapHclust(log(mat), idCol=0, transpose=F, d.meth='euclidean', h.method='complete')#
ktable<-tabulate_H_Clusters(h, ks=1:20)#
ct<-reshapeClusterTable(log(mat), ktable, ft, k=20)#
#
cl<-ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)#
cl<-cl$Cluster#
#
bp<-ggplot(data=ct[ct$Cluster %in% cl,], mapping=aes(x=Class, y=value, color=Class)) + #
	geom_boxplot() + facet_grid( . ~Cluster)#
bp
ct %>% #
	group_by(Cluster) %>%#
	summarize(Count = n()/18, Mean_logCPM=mean(value), STDev_logCPM = sd(value)) %>%#
	filter(Count > 5, STDev_logCPM < 1)
